<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <Version>2.0.0-alpha</Version>
    <Company>AlexanderOnTest.tech</Company>
    <Authors>Alexander Dunn</Authors>
    <Product>NetCoreWebDriverFactory</Product>
    <Description>A library to ease the creation of Selenium WebDriver instances in .net Core projects.

Usage
For Safari, Microsoft Edge in Windows 10 October 2018 Update (version 1809) onwards or any case where the required WebDriver is on the System Path:

IWebDriver localWebDriver = StaticWebDriverFactory.GetLocalWebDriver(Browser.Edge);

For Chrome, Internet Explorer, Firefox or Microsoft Edge in Windows 10 version 1803 or earlier when the WebDriver is provided by a Nuget Package in your test project:

IWebDriver localWebDriver = StaticWebDriverFactory.GetLocalWebDriver(Browser.Edge, Path.GetDirectoryName(Assembly.GetCallingAssembly().Location));

or 

IWebDriver remoteWebDriver = StaticWebDriverFactory.GetRemoteWebDriver(Browser.Chrome, gridUri, Platform.Linux);

Supported Browsers:
Chrome
Firefox
Edge (Windows 10)
Internet Explorer 11 (Windows Platforms)
Safari (MacOS)

Platforms:
Windows
Linux
MacOS

Tested and working on Windows 10, Linux (Ubuntu 18.04) and MacOS Mojave

The repository at
https://github.com/AlexanderOnTesting/NetCoreWebDriverFactory
contains test projects for Windows, Linux and MacOS. These can be used to test your setup and demonstrate the options available.</Description>
    <PackageReleaseNotes>v2.0.0-alpha
Simplified generic Interfaces.
1) IDriverOptionsFactory:
        T GetLocalDriverOptions&lt;T&gt;(bool headless = false) where T : DriverOptions;
        T GetRemoteDriverOptions&lt;T&gt;(PlatformType platformType) where T : DriverOptions;
2) In addition, DefaultDriverOptionsFactory exposes a new constructor:
       public DefaultDriverOptionsFactory(Dictionary&lt;Type, DriverOptions&gt; driverOptionsDictionary)
to enable the use of your own standard options choices.
       protected virtual T SetPlatform&lt;T&gt;(T options, PlatformType platformType) where T : DriverOptions
       protected virtual T AddHeadlessOption&lt;T&gt;(T driverOptions) where T : DriverOptions</PackageReleaseNotes>
    <Copyright>Copyright 2018 Alexander Dunn</Copyright>
    <PackageProjectUrl>https://github.com/AlexanderOnTesting/NetCoreWebDriverFactory</PackageProjectUrl>
    <PackageLicenseUrl>http://www.apache.org/licenses/LICENSE-2.0</PackageLicenseUrl>
    <PackageTags>Selenium, WebDriverFactory, WebDriver, Selenium WebDriver, DotNet Core, .net Core.</PackageTags>
    <PackageId>Selenium.WebDriver.NetCoreWebDriverFactory</PackageId>
    <LangVersion>7.1</LangVersion>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DefineConstants />
    <DocumentationFile>C:\src\NetCoreWebDriverFactory\Main\AlexanderOnTest.NetCoreWebDriverFactory\AlexanderOnTest.NetCoreWebDriverFactory.xml</DocumentationFile>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Selenium.WebDriver" Version="3.14.0" />
  </ItemGroup>

</Project>
