<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AlexanderOnTest.NetCoreWebDriverFactory</name>
    </assembly>
    <members>
        <member name="T:AlexanderOnTest.NetCoreWebDriverFactory.Browser">
            <summary>
            Enum of supported desktop WebDriver supported Browsers
            </summary>
        </member>
        <member name="F:AlexanderOnTest.NetCoreWebDriverFactory.Browser.Firefox">
            <summary>
            Mozilla Firefox
            </summary>
        </member>
        <member name="F:AlexanderOnTest.NetCoreWebDriverFactory.Browser.Chrome">
            <summary>
            Google Chrome
            </summary>
        </member>
        <member name="F:AlexanderOnTest.NetCoreWebDriverFactory.Browser.InternetExplorer">
            <summary>
            Microsoft Internet Explorer version 11
            </summary>
        </member>
        <member name="F:AlexanderOnTest.NetCoreWebDriverFactory.Browser.Edge">
            <summary>
            Microsoft Edge
            </summary>
        </member>
        <member name="F:AlexanderOnTest.NetCoreWebDriverFactory.Browser.Safari">
            <summary>
             Apple Safari
            </summary>
        </member>
        <member name="T:AlexanderOnTest.NetCoreWebDriverFactory.DefaultDriverOptionsFactory">
            <summary>
            An overridable implementation of the DriverOptionsFactory Interface.
            </summary>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultDriverOptionsFactory.GetChromeOptions(OpenQA.Selenium.PlatformType)">
            <summary>
            Return a configured ChromeOptions instance.
            </summary>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultDriverOptionsFactory.GetChromeOptions(System.Boolean,OpenQA.Selenium.PlatformType)">
            <summary>
            Return a configured ChromeOptions instance.
            </summary>
            <param name="headless"></param>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultDriverOptionsFactory.GetFirefoxOptions(OpenQA.Selenium.PlatformType)">
            <summary>
            Return a configured FirefoxOptions instance.
            </summary>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultDriverOptionsFactory.GetFirefoxOptions(System.Boolean,OpenQA.Selenium.PlatformType)">
            <summary>
            Return a configured FirefoxOptions instance.
            </summary>
            <param name="headless"></param>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultDriverOptionsFactory.GetEdgeOptions(OpenQA.Selenium.PlatformType)">
            <summary>
            Return a configured EdgeOptions instance.
            </summary>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultDriverOptionsFactory.GetInternetExplorerOptions(OpenQA.Selenium.PlatformType)">
            <summary>
            Return a configured InternetExplorerOptions instance.
            </summary>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultDriverOptionsFactory.GetSafariOptions(OpenQA.Selenium.PlatformType)">
            <summary>
            Return a configured SafariOptions instance.
            </summary>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultDriverOptionsFactory.SetPlatform``1(``0,OpenQA.Selenium.PlatformType)">
            <summary>
            Add the platform configuration to a DriverOptions instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="options"></param>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="T:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory">
            <summary>
            Overridable implementation of the IWebDriverFactory interface.
            </summary>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.#ctor(System.Uri,AlexanderOnTest.NetCoreWebDriverFactory.IDriverOptionsFactory,System.String)">
            <summary>
            Return a DefaultWebDriverFactory instance.
            </summary>
            <param name="gridUri"></param>
            <param name="driverOptionsFactory"></param>
            <param name="driverPath"></param>
        </member>
        <member name="P:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.GridUri">
            <summary>
            The Uri of your selenium grid for remote Webdriver instances.
            </summary>
        </member>
        <member name="P:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.DriverOptionsFactory">
            <summary>
            The DriverOptionsFactory to use.
            </summary>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.GetLocalWebDriver(AlexanderOnTest.NetCoreWebDriverFactory.Browser,System.String,System.Boolean)">
            <summary>
            Return a local webdriver of the given browser type with default settings.
            Try using driverPath = "Path.GetDirectoryName(Assembly.GetCallingAssembly().Location)" for Chrome, Firefox, Internet Explorer and Edge on Windows 10 version 1803 and earlier 
            Try using driverPath = null (default) for Safari and Edge on Windows 10 version 1809 and later
            </summary>
            <param name="browser"></param>
            <param name="driverPath"></param>
            <param name="headless"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.Chrome.ChromeOptions,System.String,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a Local Chrome WebDriver instance.
            Try using driverPath = "Path.GetDirectoryName(Assembly.GetCallingAssembly().Location)"
            </summary>
            <param name="options"></param>
            <param name="driverPath"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.Firefox.FirefoxOptions,System.String,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a local Firefox WebDriver instance.
            Try using driverPath = "Path.GetDirectoryName(Assembly.GetCallingAssembly().Location)"
            </summary>
            <param name="options"></param>
            <param name="driverPath"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.Edge.EdgeOptions,System.String,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a local Edge WebDriver instance. (Only supported on Microsoft Windows 10)
            Try using driverPath = null for Windows 10 v1809 onwards.
            Try using driverPath = "Path.GetDirectoryName(Assembly.GetCallingAssembly().Location)" for Windows 10 v 1803 and earlier
            </summary>
            <param name="options"></param>
            <param name="driverPath"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.IE.InternetExplorerOptions,System.String,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a local Internet Explorer WebDriver instance. (Only supported on Microsoft Windows)
            Try using driverPath = "Path.GetDirectoryName(Assembly.GetCallingAssembly().Location)"
            </summary>
            <param name="options"></param>
            <param name="driverPath"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.Safari.SafariOptions,System.String,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a local Safari WebDriver instance. (Only supported on Mac Os)
            Try using driverPath = null (default value)
            </summary>
            <param name="options"></param>
            <param name="driverPath"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.GetRemoteWebDriver(OpenQA.Selenium.DriverOptions,System.Uri,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a RemoteWebDriver of the given browser type with default settings.
            </summary>
            <param name="options"></param>
            <param name="gridUrl"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.GetRemoteWebDriver(AlexanderOnTest.NetCoreWebDriverFactory.Browser,System.Uri,OpenQA.Selenium.PlatformType)">
            <summary>
            Return a configured RemoteWebDriver of the given browser type with default settings.
            </summary>
            <param name="browser"></param>
            <param name="gridUrl"></param>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.SetWindowSize(OpenQA.Selenium.IWebDriver,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Convenience method for setting the Window Size of a WebDriver to common values. (768P, 1080P and fullscreen)
            </summary>
            <param name="driver"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="T:AlexanderOnTest.NetCoreWebDriverFactory.IDriverOptionsFactory">
            <summary>
            Interface for DriverOptionsFactory instances.
            </summary>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IDriverOptionsFactory.GetChromeOptions(OpenQA.Selenium.PlatformType)">
            <summary>
            Return a configured ChromeOptions instance.
            </summary>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IDriverOptionsFactory.GetChromeOptions(System.Boolean,OpenQA.Selenium.PlatformType)">
            <summary>
            Return a configured ChromeOptions instance.
            </summary>
            <param name="headless"></param>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IDriverOptionsFactory.GetFirefoxOptions(OpenQA.Selenium.PlatformType)">
            <summary>
            Return a configured FirefoxOptions instance.
            </summary>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IDriverOptionsFactory.GetFirefoxOptions(System.Boolean,OpenQA.Selenium.PlatformType)">
            <summary>
            Return a configured FirefoxOptions instance.
            </summary>
            <param name="headless"></param>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IDriverOptionsFactory.GetEdgeOptions(OpenQA.Selenium.PlatformType)">
            <summary>
            Return a configured EdgeOptions instance.
            </summary>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IDriverOptionsFactory.GetInternetExplorerOptions(OpenQA.Selenium.PlatformType)">
            <summary>
            Return a configured InternetExplorerOptions instance.
            </summary>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IDriverOptionsFactory.GetSafariOptions(OpenQA.Selenium.PlatformType)">
            <summary>
            Return a configured SafariOptions instance.
            </summary>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IDriverOptionsFactory.SetPlatform``1(``0,OpenQA.Selenium.PlatformType)">
            <summary>
            Add the platform configuration to a DriverOptions instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="options"></param>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="T:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverFactory">
            <summary>
            Interface for WebDriverFactory Instances.
            </summary>
        </member>
        <member name="P:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverFactory.GridUri">
            <summary>
            The Uri of your selenium grid for remote Webdriver instances.
            </summary>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverFactory.GetLocalWebDriver(AlexanderOnTest.NetCoreWebDriverFactory.Browser,System.String,System.Boolean)">
            <summary>
            Return a local webdriver of the given browser type with default settings.
            Try using driverPath = "Path.GetDirectoryName(Assembly.GetCallingAssembly().Location)" for Chrome, Firefox, Internet Explorer and Edge on Windows 10 version 1803 and earlier 
            Try using driverPath = null (default) for Safari and Edge on Windows 10 version 1809 and later
            </summary>
            <param name="browser"></param>
            <param name="driverPath"></param>
            <param name="headless"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.Chrome.ChromeOptions,System.String,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a Local Chrome WebDriver instance.
            Try using driverPath = "Path.GetDirectoryName(Assembly.GetCallingAssembly().Location)"
            </summary>
            <param name="options"></param>
            <param name="driverPath"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.Firefox.FirefoxOptions,System.String,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a local Firefox WebDriver instance.
            Try using driverPath = "Path.GetDirectoryName(Assembly.GetCallingAssembly().Location)"
            </summary>
            <param name="options"></param>
            <param name="driverPath"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.Edge.EdgeOptions,System.String,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a local Edge WebDriver instance. (Only supported on Microsoft Windows 10)
            Try using driverPath = null for Windows 10 v1809 onwards.
            Try using driverPath = "Path.GetDirectoryName(Assembly.GetCallingAssembly().Location)" for Windows 10 v 1803 and earlier
            </summary>
            <param name="options"></param>
            <param name="driverPath"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.IE.InternetExplorerOptions,System.String,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a local Internet Explorer WebDriver instance. (Only supported on Microsoft Windows)
            Try using driverPath = "Path.GetDirectoryName(Assembly.GetCallingAssembly().Location)"
            </summary>
            <param name="options"></param>
            <param name="driverPath"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.Safari.SafariOptions,System.String,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a local Safari WebDriver instance. (Only supported on Mac Os)
            Try using driverPath = null (default value)
            </summary>
            <param name="options"></param>
            <param name="driverPath"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverFactory.GetRemoteWebDriver(OpenQA.Selenium.DriverOptions,System.Uri,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a RemoteWebDriver of the given browser type with default settings.
            </summary>
            <param name="options"></param>
            <param name="gridUrl"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverFactory.GetRemoteWebDriver(AlexanderOnTest.NetCoreWebDriverFactory.Browser,System.Uri,OpenQA.Selenium.PlatformType)">
            <summary>
            Return a configured RemoteWebDriver of the given browser type with default settings.
            </summary>
            <param name="browser"></param>
            <param name="gridUrl"></param>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverFactory.SetWindowSize(OpenQA.Selenium.IWebDriver,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Convenience method for setting the Window Size of a WebDriver to common values. (768P, 1080P and fullscreen)
            </summary>
            <param name="driver"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="T:AlexanderOnTest.NetCoreWebDriverFactory.StaticDriverOptionsFactory">
            <summary>
            Static Factory for DriverOptions
            </summary>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.StaticDriverOptionsFactory.GetChromeOptions(OpenQA.Selenium.PlatformType)">
            <summary>
            Return a configured ChromeOptions instance.
            </summary>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.StaticDriverOptionsFactory.GetChromeOptions(System.Boolean,OpenQA.Selenium.PlatformType)">
            <summary>
            Return a configured ChromeOptions instance.
            </summary>
            <param name="headless"></param>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.StaticDriverOptionsFactory.GetFirefoxOptions(OpenQA.Selenium.PlatformType)">
            <summary>
            Return a configured FirefoxOptions instance.
            </summary>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.StaticDriverOptionsFactory.GetFirefoxOptions(System.Boolean,OpenQA.Selenium.PlatformType)">
            <summary>
            Return a configured FirefoxOptions instance.
            </summary>
            <param name="headless"></param>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.StaticDriverOptionsFactory.GetEdgeOptions(OpenQA.Selenium.PlatformType)">
            <summary>
            Return a configured EdgeOptions instance.
            </summary>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.StaticDriverOptionsFactory.GetInternetExplorerOptions(OpenQA.Selenium.PlatformType)">
            <summary>
            Return a configured InternetExplorerOptions instance.
            </summary>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.StaticDriverOptionsFactory.GetSafariOptions(OpenQA.Selenium.PlatformType)">
            <summary>
            Return a configured SafariOptions instance.
            </summary>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.StaticDriverOptionsFactory.SetPlatform``1(``0,OpenQA.Selenium.PlatformType)">
            <summary>
            Add the platform configuration to a DriverOptions instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="options"></param>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="T:AlexanderOnTest.NetCoreWebDriverFactory.StaticWebDriverFactory">
            <summary>
            Static Factory for WebDriverInstances with configuration.
            </summary>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.StaticWebDriverFactory.GetLocalWebDriver(AlexanderOnTest.NetCoreWebDriverFactory.Browser,System.String,System.Boolean)">
            <summary>
            Return a local webdriver of the given browser type with default settings.
            Try using driverPath = "Path.GetDirectoryName(Assembly.GetCallingAssembly().Location)" for Chrome, Firefox, Internet Explorer and Edge on Windows 10 version 1803 and earlier 
            Try using driverPath = null (default) for Safari and Edge on Windows 10 version 1809 and later
            </summary>
            <param name="browser"></param>
            <param name="driverPath"></param>
            <param name="headless"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.StaticWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.Chrome.ChromeOptions,System.String,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a Local Chrome WebDriver instance.
            Try using driverPath = "Path.GetDirectoryName(Assembly.GetCallingAssembly().Location)" 
            </summary>
            <param name="options"></param>
            <param name="driverPath"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.StaticWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.Firefox.FirefoxOptions,System.String,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a local Firefox WebDriver instance.
            Try using driverPath = "Path.GetDirectoryName(Assembly.GetCallingAssembly().Location)" 
            </summary>
            <param name="options"></param>
            <param name="driverPath"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.StaticWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.Edge.EdgeOptions,System.String,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a local Edge WebDriver instance. (Only supported on Microsoft Windows 10)
            Try using driverPath = null (default) for Windows 10 version 1809 and later.
            Try using driverPath = "Path.GetDirectoryName(Assembly.GetCallingAssembly().Location)" for Windows 10 version 1803 and earlier.
            </summary>
            <param name="options"></param>
            <param name="driverPath"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.StaticWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.IE.InternetExplorerOptions,System.String,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a local Internet Explorer WebDriver instance. (Only supported on Microsoft Windows)
            Try using driverPath = "Path.GetDirectoryName(Assembly.GetCallingAssembly().Location)"
            </summary>
            <param name="options"></param>
            <param name="driverPath"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.StaticWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.Safari.SafariOptions,System.String,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a local Safari WebDriver instance. (Only supported on Mac Os)
            Try using driverPath = null (default)
            </summary>
            <param name="options"></param>
            <param name="driverPath"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.StaticWebDriverFactory.GetRemoteWebDriver(OpenQA.Selenium.DriverOptions,System.Uri,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a RemoteWebDriver of the given browser type with default settings.
            </summary>
            <param name="options"></param>
            <param name="gridUrl"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.StaticWebDriverFactory.GetRemoteWebDriver(AlexanderOnTest.NetCoreWebDriverFactory.Browser,System.Uri,OpenQA.Selenium.PlatformType)">
            <summary>
            Return a configured RemoteWebDriver of the given browser type with default settings.
            </summary>
            <param name="browser"></param>
            <param name="gridUrl"></param>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.StaticWebDriverFactory.SetWindowSize(OpenQA.Selenium.IWebDriver,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Convenience method for setting the Window Size of a WebDriver to common values. (768P, 1080P and fullscreen)
            </summary>
            <param name="driver"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="T:AlexanderOnTest.NetCoreWebDriverFactory.WindowSize">
            <summary>
            Enum of Browser window size configurations.
            </summary>
        </member>
        <member name="F:AlexanderOnTest.NetCoreWebDriverFactory.WindowSize.Hd">
            <summary>
            HD - 1366 x 768 (cheap laptop) screen size. Most common 'PC' screen size.
            </summary>
        </member>
        <member name="F:AlexanderOnTest.NetCoreWebDriverFactory.WindowSize.Fhd">
            <summary>
            Full HD - 1920 x 1080 screen size. 2nd most common 'PC' screen size.
            </summary>
        </member>
        <member name="F:AlexanderOnTest.NetCoreWebDriverFactory.WindowSize.Maximise">
            <summary>
            Maximise the browser to the full screen.
            </summary>
        </member>
        <member name="F:AlexanderOnTest.NetCoreWebDriverFactory.WindowSize.Unchanged">
            <summary>
            Continue without setting screen size, this may not be consistent.
            </summary>
        </member>
    </members>
</doc>
