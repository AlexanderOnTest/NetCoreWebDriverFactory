<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <Version>2.2.0</Version>
    <Company>AlexanderOnTest.tech</Company>
    <Authors>Alexander Dunn</Authors>
    <Product>NetCoreWebDriverFactory</Product>
    <Description>A library to ease the creation of Selenium WebDriver instances in .net Core projects.

Usage
Instantiate a WebDriverFactory from a .NET Core project:
IWebDriverFactory webDriverFactory =  new DefaultWebDriverFactory(Path.GetDirectoryName(Assembly.GetCallingAssembly().Location), {{yourGridUri}});

Use the alternative Windows1803WebDriverFactory implementation for Windows 10 version 1803 and earlier.
IWebDriverFactory webDriverFactory =  new Windows1803WebDriverFactory(Path.GetDirectoryName(Assembly.GetCallingAssembly().Location), {{yourGridUri}});

This is not intended for .NET Framework (as it is really not required) but if you would like to use it in a Framework project use:
IWebDriverFactory webDriverFactory =  new FrameworkWebDriverFactory({{yourGridUri}});

Then to use it
IWebDriver localWebDriver = webDriverFactory.GetLocalWebDriver(Browser.xxxx);
or 
IWebDriver remoteWebDriver = webDriverFactory.GetRemoteWebDriver(Browser.xxxx, PlatformType.xxxx);

Supported Browsers:
Chrome
Firefox
Edge (Windows 10)
Internet Explorer 11 (Windows Platforms)
Safari (MacOS)

Platforms:
Windows (PlatformType.Windows)
Linux        (PlatformType.Linux)
MacOS     (PlatformType.Mac)

Tested and working on Windows 10, Linux (Ubuntu 18.04) and MacOS Mojave

The repository at
https://github.com/AlexanderOnTesting/NetCoreWebDriverFactory
contains test projects for Windows, Linux and MacOS. These can be used to test your setup and demonstrate the options available.

The supporting package https://www.nuget.org/packages/Selenium.WebDriver.WebDriverFactoryNunitConfig provides easy test configuration options if using Nunit 3 for your tests.</Description>
    <PackageReleaseNotes>v2.2.0
Introduction of IWebDriverConfiguration and addition of iDisposable on instances.

v2.1.0
Addition of a generalised GetWebDriver method for both local and remote webdrivers.
IWebDriver GetWebDriver(Browser browser, WindowSize windowSize = WindowSize.Hd, bool isLocal = true,
            PlatformType platformType = PlatformType.Any, bool headless = false)

And a WebDriverManager interface and implementation that uses it.

v2.0.0 final
Significant refactoring from v1.0.1 for simplified usage:
1) IWebDriverFactory:
        IWebDriver GetRemoteWebDriver(Browser browser, PlatformType platformType = PlatformType.Any, WindowSize windowSize = WindowSize.Hd, bool headless = false);
        IWebDriver GetRemoteWebDriver(DriverOptions options, WindowSize windowSize = WindowSize.Hd);

        IWebDriver GetLocalWebDriver(Browser browser, WindowSize windowSize = WindowSize.Hd, bool headless = false);
        IWebDriver GetLocalWebDriver(ChromeOptions options, WindowSize windowSize = WindowSize.Hd);
        IWebDriver GetLocalWebDriver(FirefoxOptions options, WindowSize windowSize = WindowSize.Hd);
        IWebDriver GetLocalWebDriver(EdgeOptions options, WindowSize windowSize = WindowSize.Hd);
        IWebDriver GetLocalWebDriver(InternetExplorerOptions options, WindowSize windowSize = WindowSize.Hd);
        IWebDriver GetLocalWebDriver(SafariOptions options, WindowSize windowSize = WindowSize.Hd);

DefaultWebDriverFactory no longer has a default constructor and must be instantiated using
        public DefaultWebDriverFactory(string installedDriverPath, Uri gridUri = null, IDriverOptionsFactory driverOptionsFactory = null)

2) IDriverOptionsFactory:
        T GetLocalDriverOptions&lt;T&gt;(bool headless = false) where T : DriverOptions;
        T GetRemoteDriverOptions&lt;T&gt;(PlatformType platformType) where T : DriverOptions;

In addition, DefaultDriverOptionsFactory exposes a new constructor:
       public DefaultDriverOptionsFactory(Dictionary&lt;Type, DriverOptions&gt; driverOptionsDictionary)
to enable the use of your own standard DriverOptions choices.</PackageReleaseNotes>
    <Copyright>Copyright 2019 Alexander Dunn</Copyright>
    <PackageProjectUrl>https://github.com/AlexanderOnTesting/NetCoreWebDriverFactory</PackageProjectUrl>
    <PackageLicenseExpression>Apache-2.0</PackageLicenseExpression>
    <PackageTags>Selenium, WebDriverFactory, WebDriver, Selenium WebDriver, DotNet Core, .net Core.</PackageTags>
    <PackageId>Selenium.WebDriver.NetCoreWebDriverFactory</PackageId>
    <LangVersion>7.3</LangVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <FileVersion>2.2.0.0</FileVersion>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DefineConstants />
    <DocumentationFile>.\AlexanderOnTest.NetCoreWebDriverFactory.xml</DocumentationFile>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Selenium.WebDriver" Version="3.141.0" />
  </ItemGroup>

</Project>
