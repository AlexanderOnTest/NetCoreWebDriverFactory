<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AlexanderOnTest.NetCoreWebDriverFactory</name>
    </assembly>
    <members>
        <member name="T:AlexanderOnTest.NetCoreWebDriverFactory.Browser">
            <summary>
            Enum of supported desktop WebDriver supported Browsers
            </summary>
        </member>
        <member name="F:AlexanderOnTest.NetCoreWebDriverFactory.Browser.Firefox">
            <summary>
            Mozilla Firefox
            </summary>
        </member>
        <member name="F:AlexanderOnTest.NetCoreWebDriverFactory.Browser.Chrome">
            <summary>
            Google Chrome
            </summary>
        </member>
        <member name="F:AlexanderOnTest.NetCoreWebDriverFactory.Browser.InternetExplorer">
            <summary>
            Microsoft Internet Explorer version 11
            </summary>
        </member>
        <member name="F:AlexanderOnTest.NetCoreWebDriverFactory.Browser.Edge">
            <summary>
            Microsoft Edge
            </summary>
        </member>
        <member name="F:AlexanderOnTest.NetCoreWebDriverFactory.Browser.Safari">
            <summary>
             Apple Safari
            </summary>
        </member>
        <member name="T:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory">
            <summary>
            Overridable implementation of the IWebDriverFactory interface for .NET Core test projects.
            </summary>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.#ctor(System.String,System.Uri,AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.IDriverOptionsFactory)">
            <summary>
            Return a DriverFactory instance for use in .NET Core projects.
            Try using installedDriverPath = "Path.GetDirectoryName(Assembly.GetCallingAssembly().Location)" when running from .NET core projects.
            </summary>
            <param name="installedDriverPath"></param>
            <param name="gridUri"></param>
            <param name="driverOptionsFactory"></param>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.#ctor(AlexanderOnTest.NetCoreWebDriverFactory.DriverPath,AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverConfiguration,AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.IDriverOptionsFactory)">
            <summary>
            Return a DriverFactory instance for use in .NET Core projects.
            Try using driverPath = new DriverPath(Assembly.GetCallingAssembly()) when testing locally from .NET core projects.
            </summary>
            <param name="driverPath"></param>
            <param name="configuration"></param>
            <param name="driverOptionsFactory"></param>
        </member>
        <member name="P:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.GridUri">
            <summary>
            The Uri of your selenium grid for remote Webdriver instances.
            </summary>
        </member>
        <member name="P:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.InstalledDriverPath">
            <summary>
            The path of installed drivers.
            </summary>
        </member>
        <member name="P:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.DriverOptionsFactory">
            <summary>
            The DriverOptionsFactory to use.
            </summary>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.GetRemoteWebDriver(AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverConfiguration)">
            <summary>
            Return a RemoteWebDriver instance of the given configuration.
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.GetRemoteWebDriver(OpenQA.Selenium.DriverOptions,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a RemoteWebDriver of the given windows size.
            </summary>
            <param name="options"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.GetRemoteWebDriver(AlexanderOnTest.NetCoreWebDriverFactory.Browser,OpenQA.Selenium.PlatformType,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize,System.Boolean)">
            <summary>
            Return a configured RemoteWebDriver of the given browser type with default settings.
            </summary>
            <param name="browser"></param>
            <param name="platformType"></param>
            <param name="windowSize"></param>
            <param name="headless"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.GetLocalWebDriver(AlexanderOnTest.NetCoreWebDriverFactory.Browser,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize,System.Boolean)">
            <summary>
            Return a local webdriver of the given browser type with default settings.
            </summary>
            <param name="browser"></param>
            <param name="windowSize"></param>
            <param name="headless"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.GetLocalWebDriver(AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverConfiguration)">
            <summary>
            Return a local WebDriver instance of the given configuration.
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.Chrome.ChromeOptions,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a Local Chrome WebDriver instance.
            Try using driverPath = "Path.GetDirectoryName(Assembly.GetCallingAssembly().Location)"
            </summary>
            <param name="options"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.Firefox.FirefoxOptions,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a local Firefox WebDriver instance.
            Try using driverPath = "Path.GetDirectoryName(Assembly.GetCallingAssembly().Location)"
            </summary>
            <param name="options"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.Edge.EdgeOptions,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a local Edge WebDriver instance. (Only supported on Microsoft Windows 10 version 1809 or later)
            </summary>
            <param name="options"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.IE.InternetExplorerOptions,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a local Internet Explorer WebDriver instance. (Only supported on Microsoft Windows)
            </summary>
            <param name="options"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.Safari.SafariOptions,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a local Safari WebDriver instance. (Only supported on Mac Os)
            </summary>
            <param name="options"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.GetWebDriver(AlexanderOnTest.NetCoreWebDriverFactory.Browser,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize,System.Boolean,OpenQA.Selenium.PlatformType,System.Boolean)">
            <summary>
            Return a WebDriver instance of the given configuration.
            </summary>
            <param name="browser"></param>
            <param name="windowSize"></param>
            <param name="isLocal"></param>
            <param name="platformType"></param>
            <param name="headless"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.GetWebDriver(AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverConfiguration)">
            <summary>
            Return a WebDriver instance of the given configuration.
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DefaultWebDriverFactory.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverManager">
            <summary>
            Interface for a WebDriver Manager class that provides a singleton
            </summary>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverManager.Get">
            <summary>
            Return a singleton WebDriver instance;
            </summary>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverManager.Quit">
            <summary>
            Quit and clear the current singleton WebDriver instance;
            </summary>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverManager.GetAdditionalWebDriver">
            <summary>
            Return a new WebDriver instance independent of the singleton instance;
            </summary>
            <returns></returns>
        </member>
        <member name="T:AlexanderOnTest.NetCoreWebDriverFactory.WebDriverManager">
            <summary>
            A simple implementation of a WebDriverManager
            </summary>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.WebDriverManager.#ctor(AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverFactory,AlexanderOnTest.NetCoreWebDriverFactory.Browser,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize,System.Boolean,OpenQA.Selenium.PlatformType,System.Boolean)">
            <summary>
            Parameter based constructor for a WebDriverManager
            </summary>
            <param name="factory"></param>
            <param name="browser"></param>
            <param name="windowSize"></param>
            <param name="isLocal"></param>
            <param name="platformType"></param>
            <param name="headless"></param>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.WebDriverManager.#ctor(AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverFactory,AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverConfiguration)">
            <summary>
            Configuration based constructor for a WebDriverManager
            </summary>
            <param name="factory"></param>
            <param name="configuration"></param>
        </member>
        <member name="P:AlexanderOnTest.NetCoreWebDriverFactory.WebDriverManager.Driver">
            <summary>
            The singleton WebDriver instance.
            </summary>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.WebDriverManager.Get">
            <summary>
            Return a singleton WebDriver instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.WebDriverManager.Quit">
            <summary>
            Quit and clear the current singleton WebDriver instance;
            </summary>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.WebDriverManager.GetAdditionalWebDriver">
            <summary>
            Return a new WebDriver instance independent of the singleton instance;
            </summary>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.WebDriverManager.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.WebDriverManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.DefaultDriverOptionsFactory">
            <summary>
            An overridable implementation of the IDriverOptionsFactory Interface.
            </summary>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.DefaultDriverOptionsFactory.#ctor">
            <summary>
            Construct a default DriverOptionsFactory.
            </summary>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.DefaultDriverOptionsFactory.#ctor(System.Collections.Generic.Dictionary{System.Type,OpenQA.Selenium.DriverOptions})">
            <summary>
            Constructor to override the default DriverOptions.
            </summary>
            <param name="driverOptionsDictionary"></param>
        </member>
        <member name="P:AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.DefaultDriverOptionsFactory.DriverOptionsDictionary">
            <summary>
            Dictionary of basically configured DriverOptions instances.
            </summary>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.DefaultDriverOptionsFactory.GetLocalDriverOptions``1(System.Boolean)">
            <summary>
            Return a DriverOptions instance of the correct type configured for a Local WebDriver.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="headless"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.DefaultDriverOptionsFactory.GetRemoteDriverOptions``1(OpenQA.Selenium.PlatformType)">
            <summary>
            Return a DriverOptions instance of the correct type configured for a RemoteWebDriver.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.DefaultDriverOptionsFactory.SetPlatform``1(``0,OpenQA.Selenium.PlatformType)">
            <summary>
            Add the platform configuration to a DriverOptions instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="options"></param>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.DefaultDriverOptionsFactory.AddHeadlessOption``1(``0)">
            <summary>
            Add the headless flag if available.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="driverOptions"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.DefaultDriverOptionsFactory.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.DefaultDriverOptionsFactory.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.IDriverOptionsFactory">
            <summary>
            Interface for DriverOptionsFactory instances.
            </summary>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.IDriverOptionsFactory.GetLocalDriverOptions``1(System.Boolean)">
            <summary>
            Return a DriverOptions instance of the correct type configured for a Local WebDriver.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="headless"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.IDriverOptionsFactory.GetRemoteDriverOptions``1(OpenQA.Selenium.PlatformType)">
            <summary>
            Return a DriverOptions instance of the correct type configured for a Local WebDriver.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="T:AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.StaticDriverOptionsFactory">
            <summary>
            Static Factory for DriverOptions
            </summary>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.StaticDriverOptionsFactory.GetChromeOptions(OpenQA.Selenium.PlatformType,System.Boolean)">
            <summary>
            Return a configured ChromeOptions instance for a RemoteWebDriver.
            </summary>
            <param name="platformType"></param>
            <param name="headless"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.StaticDriverOptionsFactory.GetChromeOptions(System.Boolean)">
            <summary>
            Return a configured ChromeOptions instance  for a local WebDriver.
            </summary>
            <param name="headless"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.StaticDriverOptionsFactory.GetFirefoxOptions(OpenQA.Selenium.PlatformType,System.Boolean)">
            <summary>
            Return a configured FirefoxOptions instance for a RemoteWebDriver.
            </summary>
            <param name="platformType"></param>
            <param name="headless"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.StaticDriverOptionsFactory.GetFirefoxOptions(System.Boolean)">
            <summary>
            Return a configured FirefoxOptions instance for a local WebDriver.
            </summary>
            <param name="headless"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.StaticDriverOptionsFactory.GetEdgeOptions(OpenQA.Selenium.PlatformType)">
            <summary>
            Return a configured EdgeOptions instance.
            </summary>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.StaticDriverOptionsFactory.GetInternetExplorerOptions(OpenQA.Selenium.PlatformType)">
            <summary>
            Return a configured InternetExplorerOptions instance.
            </summary>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.StaticDriverOptionsFactory.GetSafariOptions(OpenQA.Selenium.PlatformType)">
            <summary>
            Return a configured SafariOptions instance.
            </summary>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.StaticDriverOptionsFactory.SetPlatform``1(``0,OpenQA.Selenium.PlatformType)">
            <summary>
            Add the platform configuration to a DriverOptions instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="options"></param>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.StaticDriverOptionsFactory.AddHeadlessOption``1(``0)">
            <summary>
            Add the headless flag if available.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="driverOptions"></param>
            <returns></returns>
        </member>
        <member name="T:AlexanderOnTest.NetCoreWebDriverFactory.DriverPath">
            <summary>
            DriverPath object containing the local WebDriver executable path as a string
            </summary>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DriverPath.#ctor">
            <summary>
            For convenience when local WebDriver testing is not required. Use 'new DriverPath(Assembly.GetExecutingAssembly());' for local testing
            </summary>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DriverPath.#ctor(System.String)">
            <summary>
            For convenience when local WebDriver testing is not required. Use 'new DriverPath(Assembly.GetExecutingAssembly());' for local testing
            </summary>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.DriverPath.#ctor(System.Reflection.Assembly)">
            <summary>
            For testing locally call as 'new DriverPath(Assembly.GetExecutingAssembly());' 
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="P:AlexanderOnTest.NetCoreWebDriverFactory.DriverPath.PathString">
            <summary>
            Return the pathString for locating local WebDriver executables.
            </summary>
        </member>
        <member name="T:AlexanderOnTest.NetCoreWebDriverFactory.FrameworkWebDriverFactory">
            <summary>
            Overridable implementation of the IWebDriverFactory interface for use with .Net Framework test projects.
            </summary>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.FrameworkWebDriverFactory.#ctor(System.Uri,AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.IDriverOptionsFactory)">
            <summary>
            Return a WebDriverFactory instance for use with .NET framework projects
            </summary>
            <param name="gridUri"></param>
            <param name="driverOptionsFactory"></param>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.FrameworkWebDriverFactory.#ctor(AlexanderOnTest.NetCoreWebDriverFactory.DriverPath,AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverConfiguration,AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.IDriverOptionsFactory)">
            <summary>
            Return a WebDriverFactory instance for use with .NET framework projects
            </summary>
            <param name="driverPath"></param>
            <param name="configuration"></param>
            <param name="driverOptionsFactory"></param>
        </member>
        <member name="T:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverConfiguration">
            <summary>
            Interface for a WebDriver Configuration object.
            </summary>
        </member>
        <member name="P:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverConfiguration.Browser">
            <summary>
            Browser type to request.
            </summary>
        </member>
        <member name="P:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverConfiguration.PlatformType">
            <summary>
            Platform to request for a RemoteWebDriver.
            </summary>
        </member>
        <member name="P:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverConfiguration.WindowSize">
            <summary>
            WindowSize to request.
            </summary>
        </member>
        <member name="P:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverConfiguration.GridUri">
            <summary>
            The Uri of the Selenium grd to use for remote calls.
            </summary>
        </member>
        <member name="P:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverConfiguration.IsLocal">
            <summary>
            Use a local WebDriver.
            </summary>
        </member>
        <member name="P:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverConfiguration.Headless">
            <summary>
            Run headless if available.
            </summary>
        </member>
        <member name="T:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverFactory">
            <summary>
            Interface for WebDriverFactory Instances.
            </summary>
        </member>
        <member name="P:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverFactory.GridUri">
            <summary>
            The Uri of your selenium grid for remote Webdriver instances.
            </summary>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverFactory.GetRemoteWebDriver(AlexanderOnTest.NetCoreWebDriverFactory.Browser,OpenQA.Selenium.PlatformType,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize,System.Boolean)">
            <summary>
            Return a configured RemoteWebDriver of the given browser type with default settings.
            </summary>
            <param name="browser"></param>
            <param name="platformType"></param>
            <param name="windowSize"></param>
            <param name="headless"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverFactory.GetRemoteWebDriver(AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverConfiguration)">
            <summary>
            Return a RemoteWebDriver instance of the given configuration.
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverFactory.GetRemoteWebDriver(OpenQA.Selenium.DriverOptions,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a RemoteWebDriver of the given windows size.
            </summary>
            <param name="options"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverFactory.GetLocalWebDriver(AlexanderOnTest.NetCoreWebDriverFactory.Browser,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize,System.Boolean)">
            <summary>
            Return a local webdriver of the given browser type with default settings.
            </summary>
            <param name="browser"></param>
            <param name="windowSize"></param>
            <param name="headless"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverFactory.GetLocalWebDriver(AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverConfiguration)">
            <summary>
            Return a Local IWebDriver instance of the given configuration.
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.Chrome.ChromeOptions,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a Local Chrome WebDriver instance.
            </summary>
            <param name="options"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.Firefox.FirefoxOptions,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a local Firefox WebDriver instance.
            </summary>
            <param name="options"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.Edge.EdgeOptions,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a local Edge WebDriver instance. (Only supported on Microsoft Windows 10)
            </summary>
            <param name="options"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.IE.InternetExplorerOptions,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a local Internet Explorer WebDriver instance. (Only supported on Microsoft Windows)
            </summary>
            <param name="options"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.Safari.SafariOptions,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a local Safari WebDriver instance. (Only supported on Mac Os)
            </summary>
            <param name="options"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverFactory.GetWebDriver(AlexanderOnTest.NetCoreWebDriverFactory.Browser,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize,System.Boolean,OpenQA.Selenium.PlatformType,System.Boolean)">
            <summary>
            Return a WebDriver instance of the given configuration.
            </summary>
            <param name="browser"></param>
            <param name="windowSize"></param>
            <param name="isLocal"></param>
            <param name="platformType"></param>
            <param name="headless"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverFactory.GetWebDriver(AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverConfiguration)">
            <summary>
            Return a WebDriver instance of the given configuration.
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="T:AlexanderOnTest.NetCoreWebDriverFactory.StaticWebDriverFactory">
            <summary>
            Static Factory for WebDriverInstances with configuration.
            </summary>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.StaticWebDriverFactory.GetLocalWebDriver(AlexanderOnTest.NetCoreWebDriverFactory.Browser,System.String,System.Boolean)">
            <summary>
            Return a local webdriver of the given browser type with default settings.
            Try using driverPath = "Path.GetDirectoryName(Assembly.GetCallingAssembly().Location)" for Chrome, Firefox, Internet Explorer and Edge on Windows 10 version 1803 and earlier 
            Try using driverPath = null (default) for Safari and Edge on Windows 10 version 1809 and later
            </summary>
            <param name="browser"></param>
            <param name="driverPath"></param>
            <param name="headless"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.StaticWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.Chrome.ChromeOptions,System.String,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a Local Chrome WebDriver instance.
            Try using driverPath = "Path.GetDirectoryName(Assembly.GetCallingAssembly().Location)" 
            </summary>
            <param name="options"></param>
            <param name="driverPath"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.StaticWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.Firefox.FirefoxOptions,System.String,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a local Firefox WebDriver instance.
            Try using driverPath = "Path.GetDirectoryName(Assembly.GetCallingAssembly().Location)" 
            </summary>
            <param name="options"></param>
            <param name="driverPath"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.StaticWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.Edge.EdgeOptions,System.String,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a local Edge WebDriver instance. (Only supported on Microsoft Windows 10)
            Try using driverPath = null (default) for Windows 10 version 1809 and later.
            Try using driverPath = "Path.GetDirectoryName(Assembly.GetCallingAssembly().Location)" for Windows 10 version 1803 and earlier.
            </summary>
            <param name="options"></param>
            <param name="driverPath"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.StaticWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.IE.InternetExplorerOptions,System.String,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a local Internet Explorer WebDriver instance. (Only supported on Microsoft Windows)
            Try using driverPath = "Path.GetDirectoryName(Assembly.GetCallingAssembly().Location)"
            </summary>
            <param name="options"></param>
            <param name="driverPath"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.StaticWebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.Safari.SafariOptions,System.String,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a local Safari WebDriver instance. (Only supported on Mac Os)
            Try using driverPath = null (default)
            </summary>
            <param name="options"></param>
            <param name="driverPath"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.StaticWebDriverFactory.GetRemoteWebDriver(OpenQA.Selenium.DriverOptions,System.Uri,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a RemoteWebDriver of the given browser type with default settings.
            </summary>
            <param name="options"></param>
            <param name="gridUrl"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.StaticWebDriverFactory.GetRemoteWebDriver(AlexanderOnTest.NetCoreWebDriverFactory.Browser,System.Uri,OpenQA.Selenium.PlatformType)">
            <summary>
            Return a configured RemoteWebDriver of the given browser type with default settings.
            </summary>
            <param name="browser"></param>
            <param name="gridUrl"></param>
            <param name="platformType"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.StaticWebDriverFactory.SetWindowSize(OpenQA.Selenium.IWebDriver,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Convenience method for setting the Window Size of a WebDriver to common values. (768P, 1080P and fullscreen)
            </summary>
            <param name="driver"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="T:AlexanderOnTest.NetCoreWebDriverFactory.WebDriverConfiguration">
            <summary>
            A WebDriver Configuration implementation.
            </summary>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.WebDriverConfiguration.#ctor(AlexanderOnTest.NetCoreWebDriverFactory.Browser,System.Uri,System.Boolean,System.Boolean,OpenQA.Selenium.PlatformType,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Generate a new mutable WebDriverConfiguration instance.
            </summary>
            <param name="browser"></param>
            <param name="gridUri"></param>
            <param name="headless"></param>
            <param name="isLocal"></param>
            <param name="platformType"></param>
            <param name="windowSize"></param>
        </member>
        <member name="P:AlexanderOnTest.NetCoreWebDriverFactory.WebDriverConfiguration.Browser">
            <summary>
            Browser type to request.
            </summary>
        </member>
        <member name="P:AlexanderOnTest.NetCoreWebDriverFactory.WebDriverConfiguration.PlatformType">
            <summary>
            Platform to request for a RemoteWebDriver
            </summary>
        </member>
        <member name="P:AlexanderOnTest.NetCoreWebDriverFactory.WebDriverConfiguration.WindowSize">
            <summary>
            WindowSize to request
            </summary>
        </member>
        <member name="P:AlexanderOnTest.NetCoreWebDriverFactory.WebDriverConfiguration.GridUri">
            <summary>
            The Uri of the Selenium grd to use for remote calls.
            </summary>
        </member>
        <member name="P:AlexanderOnTest.NetCoreWebDriverFactory.WebDriverConfiguration.IsLocal">
            <summary>
            Use a local WebDriver.
            </summary>
        </member>
        <member name="P:AlexanderOnTest.NetCoreWebDriverFactory.WebDriverConfiguration.Headless">
            <summary>
            Run headless if available.
            </summary>
        </member>
        <member name="T:AlexanderOnTest.NetCoreWebDriverFactory.Windows1803WebDriverFactory">
            <summary>
            Implementation of the IWebDriverFactory interface for .NET Core test projects to allow Edge to work on Windows 10 version 1803 and Earlier.
            </summary>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.Windows1803WebDriverFactory.#ctor(System.String,System.Uri,AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.IDriverOptionsFactory)">
            <summary>
            Return a WebDriverFactory for Windows 10 version 1803 and earlier
            </summary>
            <param name="installedDriverPath"></param>
            <param name="gridUri"></param>
            <param name="driverOptionsFactory"></param>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.Windows1803WebDriverFactory.#ctor(AlexanderOnTest.NetCoreWebDriverFactory.DriverPath,AlexanderOnTest.NetCoreWebDriverFactory.IWebDriverConfiguration,AlexanderOnTest.NetCoreWebDriverFactory.DriverOptionsFactory.IDriverOptionsFactory)">
            <summary>
            Return a WebDriverFactory for Windows 10 version 1803 and earlier
            </summary>
            <param name="driverPath"></param>
            <param name="configuration"></param>
            <param name="driverOptionsFactory"></param>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.Windows1803WebDriverFactory.GetLocalWebDriver(AlexanderOnTest.NetCoreWebDriverFactory.Browser,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize,System.Boolean)">
            <summary>
            Return a local webdriver of the given browser type with default settings.
            </summary>
            <param name="browser"></param>
            <param name="windowSize"></param>
            <param name="headless"></param>
            <returns></returns>
        </member>
        <member name="M:AlexanderOnTest.NetCoreWebDriverFactory.Windows1803WebDriverFactory.GetLocalWebDriver(OpenQA.Selenium.Edge.EdgeOptions,AlexanderOnTest.NetCoreWebDriverFactory.WindowSize)">
            <summary>
            Return a local Edge WebDriver instance. (Only supported on Microsoft Windows 10 version 1803 or earlier)
            </summary>
            <param name="options"></param>
            <param name="windowSize"></param>
            <returns></returns>
        </member>
        <member name="T:AlexanderOnTest.NetCoreWebDriverFactory.WindowSize">
            <summary>
            Enum of Browser window size configurations.
            </summary>
        </member>
        <member name="F:AlexanderOnTest.NetCoreWebDriverFactory.WindowSize.Hd">
            <summary>
            HD - 1366 x 768 (cheap laptop) screen size. Most common 'PC' screen size.
            </summary>
        </member>
        <member name="F:AlexanderOnTest.NetCoreWebDriverFactory.WindowSize.Fhd">
            <summary>
            Full HD - 1920 x 1080 screen size. 2nd most common 'PC' screen size.
            </summary>
        </member>
        <member name="F:AlexanderOnTest.NetCoreWebDriverFactory.WindowSize.Maximise">
            <summary>
            Maximise the browser to the full screen.
            </summary>
        </member>
        <member name="F:AlexanderOnTest.NetCoreWebDriverFactory.WindowSize.Unchanged">
            <summary>
            Continue without setting screen size, this may not be consistent.
            </summary>
        </member>
    </members>
</doc>
